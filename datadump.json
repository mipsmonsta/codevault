[{"model": "auth.user", "pk": 1, "fields": {"password": "!YAqbwY15FOtlWBGLPeWkM8uhDFKy71so6mUFBCe0", "last_login": null, "is_superuser": true, "username": "admin", "first_name": "", "last_name": "", "email": "admin@example.com", "is_staff": true, "is_active": true, "date_joined": "2025-08-04T05:54:10.588Z", "groups": [], "user_permissions": []}}, {"model": "auth.user", "pk": 2, "fields": {"password": "pbkdf2_sha256$1000000$hHtpCi55tea4ZHy8gvNAgG$rV90rvI0PGb3JRaLYnAi64Bcjde0IxMRRRWtnNNeB74=", "last_login": "2025-08-04T06:02:03.107Z", "is_superuser": true, "username": "super", "first_name": "", "last_name": "", "email": "yaojintham@gmail.com", "is_staff": true, "is_active": true, "date_joined": "2025-08-04T05:59:50.119Z", "groups": [], "user_permissions": []}}, {"model": "sessions.session", "pk": "6uankmjcro3dhnks9z0nh7qw775cogx0", "fields": {"session_data": ".eJxVjDsOwjAQBe_iGlnx36Gk5wzWrneNA8iR4qRC3B0ipYD2zcx7iQTbWtPWeUkTibPQ4vS7IeQHtx3QHdptlnlu6zKh3BV50C6vM_Hzcrh_BxV6_dbZk0YHyjB6N0bSOppcbAQfVHBgLFLxmmJBGoznYLyFkbMeslWsShTvD-jVOAU:1uioGp:uc2SLqPBT-xqUL2bclq9uDjDnW12lmA-KKKE1ceSdeQ", "expire_date": "2025-08-18T06:02:03.135Z"}}, {"model": "snippets.tag", "pk": 1, "fields": {"name": "batch", "color": "#007bff"}}, {"model": "snippets.tag", "pk": 2, "fields": {"name": "leetcode", "color": "#a600ff"}}, {"model": "snippets.tag", "pk": 3, "fields": {"name": "sliding window", "color": "#976eaa"}}, {"model": "snippets.tag", "pk": 4, "fields": {"name": "Simulate", "color": "#ff00a2"}}, {"model": "snippets.snippet", "pk": 1, "fields": {"title": "Run your python scripts with virtual environment", "code": "@call %HOMEDDRIVE%%HOMEPATH%\\project\\.venv\\Scripts\\activate.bat\r\n@python %HOMEDRIVE%%HOMEPATH%\\project\\yourscript.py %*\r\n@pause\r\n@deactivate", "notes": "Windows Batch file to active the virtual environment. File assumes .venv folder is in project folder which in turn is located in the HOMEDRIVE and HOMEPATH folders.\r\n\r\n@pause does not terminate the batch file. %* allows arguments to be channeled to the python script.", "language": "other", "author": 2, "created_at": "2025-08-04T06:09:35.544Z", "updated_at": "2025-08-04T13:32:05.031Z", "is_public": true, "tags": [1]}}, {"model": "snippets.snippet", "pk": 2, "fields": {"title": "904. Fruit Into Baskets", "code": "class Solution:\r\n    def totalFruit(self, fruits: List[int]) -> int:\r\n        n = len(fruits) # number of fruits; remember that fruits[i] is the type \r\n\r\n        right = n-1\r\n        baskets = dict()\r\n        result = 0\r\n        for left in range(n-1, -1, -1):\r\n            # add fruit to the sliding window\r\n            fruit_type = fruits[left]\r\n            count = baskets.get(fruit_type, 0)\r\n            baskets[fruit_type] = count + 1\r\n\r\n            while right >= 0 and len(baskets) > 2:\r\n                right_fruit_type = fruits[right]\r\n                baskets[right_fruit_type] -= 1\r\n                if baskets[right_fruit_type] == 0:\r\n                    del baskets[right_fruit_type]\r\n                right -= 1\r\n            \r\n            # here, we only have at most 2 types of fruit\r\n            result = max(result, right - left + 1)\r\n\r\n        return result", "notes": "Sliding window - two pointers left and right. As we move left, we add fruits[left] to a hashmap \"baskets\" and count it. If the count of fruit type exceeds 2, we shrink the window by move right pointer to left, making sure to delete the fruit from the \"baskets\". At this point, before we move further left, we note the maximum number of fruit given by the \"right - left + 1\" count. Keep track of the maximum of this count.", "language": "python", "author": 2, "created_at": "2025-08-04T13:53:11.344Z", "updated_at": "2025-08-04T14:03:26.142Z", "is_public": true, "tags": [2, 3]}}, {"model": "snippets.snippet", "pk": 3, "fields": {"title": "3477 Fruits Into Baskets II", "code": "class Solution:\r\n    def numOfUnplacedFruits(self, fruits: List[int], baskets: List[int]) -> int:\r\n        # simulate \r\n        count = 0\r\n        n = len(baskets)\r\n        for fruit in fruits:\r\n            unset = 1\r\n            for i in range(n):\r\n                if fruit <= baskets[i]:\r\n                    baskets[i] = 0\r\n                    unset = 0\r\n                    break\r\n            count += unset\r\n\r\n        return count", "notes": "Constraints:\r\n\r\nn == fruits.length == baskets.length\r\n1 <= n <= 100\r\n1 <= fruits[i], baskets[i] <= 1000\r\n\r\nConstraint for size of arrays are small enough to be done using the simulate, brute force method.", "language": "python", "author": 2, "created_at": "2025-08-05T04:23:16.664Z", "updated_at": "2025-08-05T04:23:16.664Z", "is_public": true, "tags": [4, 2]}}]
